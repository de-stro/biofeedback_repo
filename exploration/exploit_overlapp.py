import numpy as np
import matplotlib.pyplot as plt

import sklearn.decomposition as skdec


with np.load('dennis.npz') as npz_file:
    eegs = npz_file['eegs'] # [ channels, samples ]
    ecg = npz_file['ecg']
    samp_rate = npz_file['sampling_rate'] # in Hz

# parameters
t_start = 200 # in s
t_segment = 30 # in s
t_delay = 0.2 # in s

n_start = int(t_start * samp_rate) # in samples
n_segment = int(t_segment * samp_rate) # in samples
n_delay = int(t_delay * samp_rate) # in samples
n_signals = eegs.shape[0]

# time (for plotting)
t = np.arange(n_segment) / samp_rate # in s

segment1 = eegs[:, n_start : n_start + n_segment]
segment2 = eegs[:, n_start + n_delay : n_start + n_delay + n_segment]

ica1 = skdec.FastICA(random_state=37)
ica2 = skdec.FastICA(random_state=37)

components1 = ica1.fit_transform(segment1.T).T
components2 = ica2.fit_transform(segment2.T).T

similarities = np.empty((n_signals, n_signals))
for i1, component1 in enumerate(components1):
    for i2, component2 in enumerate(components2):
        corr_coef = np.corrcoef(component1[n_delay:], component2[:-n_delay])
        similarities[i1, i2] = corr_coef[0, 1] # == corr_coef[1, 0]

plt.imshow(similarities)
plt.colorbar()

fig, axs = plt.subplots(components1.shape[0], 1, sharex=True)
for i1, ax in enumerate(axs):
    i2 = np.argmax(np.abs(similarities[i1]))
    ax.plot(t, components1[i1])
    ax.plot(t+t_delay, similarities[i1, i2] * components2[i2])

plt.show()
